/**
 * Apollo Intelligence - Insights Table
 * Stores proactive insights generated for users
 */

-- Create apollo_insights table
CREATE TABLE IF NOT EXISTS apollo_insights (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  type TEXT NOT NULL, -- earnings_spike, payout_ready, new_release, etc.
  priority TEXT NOT NULL CHECK (priority IN ('high', 'medium', 'low')),
  icon TEXT NOT NULL, -- Emoji icon for the insight
  title TEXT NOT NULL,
  message TEXT NOT NULL,
  action TEXT, -- Optional action Apollo can take (analyze_growth, request_payout, etc.)
  data JSONB, -- Additional data for the insight
  dismissed BOOLEAN DEFAULT FALSE,
  dismissed_at TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_apollo_insights_user_id ON apollo_insights(user_id);
CREATE INDEX IF NOT EXISTS idx_apollo_insights_dismissed ON apollo_insights(dismissed);
CREATE INDEX IF NOT EXISTS idx_apollo_insights_created_at ON apollo_insights(created_at DESC);
CREATE INDEX IF NOT EXISTS idx_apollo_insights_priority ON apollo_insights(priority);

-- Enable RLS
ALTER TABLE apollo_insights ENABLE ROW LEVEL SECURITY;

-- RLS Policies
-- Users can view their own insights
CREATE POLICY "Users can view own insights"
  ON apollo_insights
  FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

-- Users can dismiss their own insights
CREATE POLICY "Users can dismiss own insights"
  ON apollo_insights
  FOR UPDATE
  TO authenticated
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

-- Service role can insert insights (for background jobs)
CREATE POLICY "Service role can insert insights"
  ON apollo_insights
  FOR INSERT
  TO service_role
  WITH CHECK (true);

-- Service role can select all insights (for admin/analytics)
CREATE POLICY "Service role can select all insights"
  ON apollo_insights
  FOR SELECT
  TO service_role
  USING (true);

-- Add updated_at trigger
CREATE OR REPLACE FUNCTION update_apollo_insights_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_apollo_insights_updated_at
  BEFORE UPDATE ON apollo_insights
  FOR EACH ROW
  EXECUTE FUNCTION update_apollo_insights_updated_at();

-- Add comment
COMMENT ON TABLE apollo_insights IS 'Stores proactive insights generated by Apollo Intelligence for users';

